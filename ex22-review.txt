5 Reasons You Should Use ri To Read Ruby Documentation
help in ruby -> ri open
http://www.jstorimer.com/blogs/workingwithcode/7766081-5-reasons-you-should-use-ri-to-read-ruby-documentation

------------------------------------------------------

EX1: Printing

$ ruby -v : to check ruby version.

$ irb : to run Interactive Ruby Shell

puts : command to print a statement

'' : single quotes

" " : double quotes

------------------------------------------------------

EX2: Comments and Pound Characters

# : single line comment

=begin : multiple line comment
any
text
=end

puts "Hi # there."
The # in the above code is inside a string.
These pound or hash (#) characters are just considered characters and aren't considered comments.

------------------------------------------------------

EX3: Numbers and Math

+ plus
- minus
/ forward slash
\ backward slash
* asterisk
% percent
< less-than
> greater-than
<= less-than-equal
>= greater-than-equal

"Operations" means things like add, subtract, multiply, divide, squaring, etc.
If it isn't a number it is probably an operation.

### PEMDAS ###
NOTE: order of operations is PEMDAS (ex: please excuse my dear aunt sally)
which stands for Parentheses Exponents Multiplication Division Addition Subtraction.

P - Parentheses first ()
E - Exponents (ie Powers and Square Roots, etc.) - 2 power of 3 - 2 x 2 x 2 = 8
MD - Multiplication and Division (left-to-right)
AS - Addition and Subtraction (left-to-right)

ex: puts "What is 3 + 2? #{3 + 2}"
The use of #{3+2} in the code above is how you insert Ruby computations(the action of mathematical calculation) into text strings.
You can put anything that is Ruby code between the { (left-bracket) and } (right-bracket)
characters and Ruby will run it and put the result of 3 + 2 there instead of those characters #{ } .

# The order of operations dictates Division happens before Addition.
# 25 + (30 / 6) == 25 + 5 == 30

# Order of operation again 100 - (25 * 3 % 4) == 100 - 3 == 97

# Order of operations break out gives us
# 3+2+1-5+(4%2)-(1/4)+6  == 6-5+0-0+6 == 1+6 == 7

puts 3 + 2 + 1 - 5 + 4 % 2 - 1 / 4 + 6
above code displays 7 as the result once run,
since it's order of operations is PEMDAS

There are no fractions, only whole numbers.
You need to use a "floating point" number
which is a number with a decimal point, as in 10.5, or 0.89, or even 3.0.
puts 3 + 2 + 1 - 5 + 4 % 2 - 0.1 / 4 + 6  displays result as 6.975
puts 3 + 2 + 1 - 5 + 4 % 2 - 1.0 / 4 + 6  displays result as 6.75

# 3+2 == 5, 5-7 == -2. so 5 > -2.
puts "Is it true that 3 + 2 < 5 - 7?"
puts 3 + 2 < 5 - 7

% character a "modulus" and not a "percent"
In programming this calculation is typically done with simple division and the / operator.
The % modulus is a different operation that just happens to use the % symbol.
For example, "100 divided by 16 with 4 remaining."
The result of % is the remaining part 4.

------------------------------------------------------

EX4: Variables And Names
Function/ Variables names should not start with number but they can start with letters, followed by numbers and underscores will work.

variable is any line of code where you set a name = (equal) to a value.
In programming a variable is nothing more than a name for something.
Programmers use these variable names to make their code read more like English.

example:
cars = 100  :cars is the variable name and 100 is it's value, 100 is assigned to cars.
where ever you use cars you are using 100.
space_in_a_car = 4.0   #floating point '.' is used in 4.0 to make it a fraction.
drivers = 30
passengers = 90
cars_not_driven = cars - drivers  :you can use variables to do mathematical calculation. minus in this case.
cars_driven = drivers
carpool_capacity = cars_driven * space_in_a_car  :you can use variables to do mathematical calculation. multiply in this case
average_passengers_per_car = passengers / cars_driven :you can use variables to do mathematical calculation. division is this case

The = (single-equal) assigns the value on the right to a variable on the left.
The == (double-equal) tests if two things have the same value.

# variables can be called into the string " " with #{ }
puts "There are #{cars} cars available."

ERROR: when you don't declare variable and try to use it in puts you get below error.
ex4.rb:14: undefined local variable or method `carpool_capacity' for
    main:Object (NameError)

comment this line in ex4.rb to get above error: carpool_capacity = cars_driven * space_in_a_car

------------------------------------------------------

EX5: More Variables and Printing

Can I use single-quotes or double-quotes to make a string or do they do different things?
In Ruby the " (double-quote) tells Ruby to replace variables it finds with #{}, but the ' (single-quote) tells Ruby to leave the string alone and ignore any variables inside it.

Every time you put " (double-quotes) around a piece of text you have been making a string.
A string is how you make something that your program might give to a human.
You print strings, save strings to files, send strings to web servers, and many other things.

my_name = 'Chalasani'  :if value is a name ex: 'Chalasani' assigned to variable it should be in single quotes ''
my_age = 35  : if value is a number assigned to variable no single or double quotes required.

puts "Let's talk about #{my_name}."  :
You embed variables inside a string by using a special #{} sequence and then put the variable you want inside the {} characters ex: #{my_name}.
This tells Ruby, "Hey, this string needs to be formatted. Put these variables in there to display it's value."

puts "Do you know, i am #{my_age} years old." : displays the value from variable my_age.

puts "If I add #{my_age}, #{my_height}, and #{my_weight} I get #{my_age + my_height + my_weight}."
In the above line values of (my_age, my_height, my_weight) variables are displayed and then addition of the values in the three variables.

# '' - variable can't be called into single quotes with #{} into other variable ex: greeting = 'Hello, #{name}' . since it expects only characters as a string not other variable.
# "" - In double quotes you can write a string as well as call other variable with #{}.


single-quoted strings don't process ASCII escape codes and they don't do string interpolation.
name = 'Joe'
greeting = 'Hello, #{name}' # this won't produce "Hello, Joe"
puts "This is: #{greeting}"

" " allows you to do string interpolation, e.g.:
world_type = 'Mars'
"Hello #{world_type}"

except the interpolation, another difference is that 'escape sequence' does not work in single quote
puts 'a\nb' # just print a\nb
puts "a\nb" # print a, then b at newline
------------------------------------------------------

EX6: Strings and Text

# '' - variable can't be called into single quotes with #{} into other variable ex: greeting = 'Hello, #{name}' . since it expects only characters as a string not other variable.
# "" - In double quotes you can write a string as well as call other variable with #{}.

# Can I use single-quotes or double-quotes to make a string or do they do different things?
# In Ruby the " (double-quote) tells Ruby to replace variables it finds with #{}, but the ' (single-quote) tells Ruby to leave the string alone and ignore any variables inside it.

Strings can contain any number of variables that are in your Ruby script.
A string is usually a bit of text you want to display to someone, or "export" out of the program you are writing.

short and cryptic (or) short abbreviated variable names : example: x = "word" and y = 10

? Explain why adding the two strings w and e with + makes a longer string.
This is called concatenation, and it basically says take the first part and add it to the second part.
Since it's not mathematical or adding numbers, it interprets it as "take the first string and add the second string to it,
 not mathematically but put them side by side.

? Find all the places where a string is put inside a string
There are four places with literal "string" insertion (binary, do_not, x & y)

? formats  #{types_of_people} or Like this: #{variable_name}.
There is another way to put variables directly into a string, using that fancy term I mentioned before; string interpolation.
That really just means "hey, when you see these characters together, it means take the variable value and replace it inside the string.
 The format for doing that is to use the "# hash" character

------------------------------------------------------

EX7: More Printing

Can I use single-quotes or double-quotes to make a string or do they do different things?
In Ruby the " (double-quote) tells Ruby to replace variables it finds with #{}, but the ' (single-quote) tells Ruby to leave the string alone and ignore any variables inside it.

puts "Its fleece was white as #{'show'}."

In the above string, #{'show'} is not a variable it is just a word SHOW.
variables will not have single-quotes around them.

In ruby the double-quotes tells ruby to replace variable with values it finds with #{}.
but the single-quotes tells ruby to leave the string along and ignore are variable inside it.

print vs. puts : The primary difference between them is that puts adds a newline after executing, and print does not.

------------------------------------------------------

EX8: Printing, Printing

format string with #{} or %{}

you will almost always use #{} to format your strings, but there are times when you
want to apply the same format to multiple values. That's when %{} comes in handy.

formatter is just name of the variable, you can put anil if u want
we can put the formatter inside the formatter.

------------------------------------------------------

EX9:

\n to display string in new line.

------------------------------------------------------

EX10: What Was That?

: Escape sequence by adding \ backslash to single & double quotes
or just use triple quotes """  """ at the start and end of the string.

Escape double-quote inside string by add \ in-front of double-quote
puts "I am 6'2\" tall."

Escape single-quote-quote inside string by add \ in-front of single-quote
puts 'I am 6\'2" tall.'

\t : for Horizontal (TAB Space) effect for text
\n : (backslash n) new line character
\  : split single line and displays into two lines ex: persian_cat = "I'm split\non a line."
     I'm split
     on a line.
\\ : To display back slash in string backslash_cat = "I'm \\ a \\ cat." ex: I'm \ a \ cat.
\b : back space
\f : form feed
\r : carriage return
\v : vertical tab
\a : makes a bell noise

cannot comment in the """ string
cannot put #{} in '''

Use ''' when you need a multi-line string that contains #{} formatting,
.. but you don't want them to be processed yet or at all.

Use """ for all other multi-line strings.

------------------------------------------------------

EX11: Asking Questions

If you PRINT a statement and use gets.chomp in next step,
it will prompt you to input at the end of statement

If you use puts to display the statement and use gets.chomp in the next step,
it will prompt you to input in the next line.

we can use gets.chomp.to_i to get numbers as input to do math.

gets : this method will wait till you enter the input, once you hit enter key, text entered
will be passed to Variable as value. if you just use gets it will add newline (\n) automatically
to the end of the string. ruby literally adds's newline once you hit enter key to the end of your input.

.chomp : this method will avoid creation of newline (\n) that's why we use gets.chomp
it displays all inputs enter to answer multiple questions with multiple enter key hits, in 1 line.

source: http://discourse.codenewbie.org/t/what-does-gets-chomp-do/559
There are two methods happening with gets.chomp (gets and chomp). If you call gets, ruby will wait for the user to input text via the keyboard. When you press enter, this is returned. In your code when your enter your name in terminal, it sets the variable name to whatever your type in.
ex: name = gets.chomp

When you use just "gets" and press enter/return. You are actually adding a newline (\n) to the end of your string, ruby is actually literally taking the enter and adding it to the end of your input.

As for the chomp, this is a method that can be called on a string. Keep in mind when you input your name, it is input as text. Text can accept the chomp method, chomp will strip your text of any newlines (\n) automatically by using gets or manually added, or carrige returns (\r) at the end..

source: http://ruby-doc.org/core-2.0.0/String.html#method-i-chomp
Chomp, returns a new string with the given record separator removed from the end of the string.
$ "hello".chomp   => "hello"
$ "hello\n".chomp   => "hello"  # \n (new line)
$ "hello\r\n".chomp   => "hello"
$ "hello\r".chomp   => "hello"  # \r (carriage return)

irb(main):002:0> "hello \n there".chomp
=> "hello \n there"  # it printed \n in the result because, \n is not attached to hello like ex: "hello\n"

How do I get a number from someone so I can do math?
That's a little advanced, but try gets.chomp.to_i which says, "Get a string from the user, chomp off the \n, and convert it to an integer."
------------------------------------------------------

EX12: Prompting People for Numbers

to take numbers as input, we can add .to_i to the gets.chomp and it will convert into integer.
we can also save what gets.chomp returns, and call .to_i on that, ex: what we did with number = another.to_i
above statement means nothing but, user input value is stored into variable.

Floating values: use gets.chomp.to_f to get floating values like ex: 10.30

------------------------------------------------------

EX13: Parameters, Unpacking, Variables


You know how you type (ruby ex13.rb) to run the ex13.rb file? Well the ex13.rb part of the command is called an "argument."

In first, second, third = ARGV   (first, second, third are variables) (you can rename first, second, third to any name you want)
and ARGV is the (ARGUMENT VARIABLE)it holds command line Argument (ex: apple banana cat) you pass to your Ruby script ($ruby ex13.rb apple banana cat) when you run it.

Line 1 "unpacks" ARGV so that, rather than holding all the arguments, it gets assigned to three variables you can work with: first, second, and third.
It just says, "Take whatever is in ARGV, unpack it, and assign it to all of these variables on the left in order."

Change your script to use $stdin.gets.chomp, from now on since the action gets.chomp has problems with ARGV.

command line arguments come in as strings.

If you do not include all the command line arguments then it will leave the last variable empty.

for numbers use gets.chomp.to_i

------------------------------------------------------

EX14: Prompting and Passing

when using one command line argument only use this format:
ex: ARGV.first    # gets the first argument

# for now just remember that you use ARGV.first to get only one argument.

when using multiple command line arguments you can use this format:
ex: first, second, third = ARGV [or] first, second = ARGV

we have declared the variable prompt with sting '> '  or you can use double quotes
ex: prompt = "> "
later in the script when we asked a question we waited with prompt for user input.
ex: puts prompt  rather than typing prompt = '>' ins the script again and again.

A comma for (puts) is like using (puts) twice. ex: for (prompt)
we can also write puts like this ex: puts "Where do you live #{user_name}", prompt

Since there is ARGV (command line Argument) in this script, we are using stdin.gets.chomp
instead of just gets.chomp

we have used """ style to write multiline string with #{} format activator.

------------------------------------------------------

EX15: Reading Files

# for now just remember that you use ARGV.first to get only one argument.

when we execute ex15.rb file, ex15.rb will read text from ex15_sample.txt file and print it out.
ex15.rb will "open" ex15_sample.txt into our script and print it out.

we are not "hard coding" ex15_sample.txt into ex15.rb,
since we want flexibility of calling any file.

solution is to use ARGV or gets.chomp to ask the user what file to open instead of
"hard coding" the file's name in ex15.rb

since we are asking to enter only one file name in command line argument,
we are using filename = ARGV.first

txt & txt_again can be any name ex: anil, txt is just a variable declared.

Have your script also call close() on the txt and txt_again variables. It's important to close files when you are done with them.

***** txt = open(filename)
"open" will open the file ex15_sample.txt into ex15.rb but not the file contents,
it actually makes something called a "file object".
file object is like a dvd player but not a dvd.

puts "Here's your file #{filename}:" will print name of the file.

"Read" reads the content of the file. you can assign the result to a variable.
"read" is a function that we called on txt, by using open in txt = open(filename)
we get the file into txt. file(txt) also have commands you can give it, you give a file a
command by using the . (dot or period), the name of the command, and parameters.
just like open(filename) open is the command and (filename) is the parameter.
just like gets.chomp where gets.chomp is the command and chomp is the parameter.

In txt.read txt is the file and read is the command, function or method,
the difference is that txt.read says, "Hey txt ! Do your read command
with NO parameters!"

ruby will not restrict you from opening a file more than once. sometimes this is required.

filename = ARGV.first or filename = gets.chomp which way is better?
If we are writing automation script,
by using ARGV we can give the file name at the start as argument and let the script run for 1000 times.
if we give the file name in the middle with gets.chomp some one should be there to give 1000 times.

------------------------------------------------------

EX16: Reading and writing files

All sorts of commands(methods/functions) that can be given to files.

open -- to open a file, open's it in 'r' (read) mode by default
close -- Closes the file. like File -> Save.. in your editor
read -- Reads the contents of the file. you can assign the result to a variable.
readline -- Reads just one line of a text file.
truncate -- Empties the file. Watch out if you care about the file.
write('stuff') -- Writes "stuff" to the file.
seek(0) -- Move the read/write location to the beginning of the file.
exists --
length --
File (with capital F) --

some of the above commands take parameters, but we do not care about that.

$stdin.gets creates one line empty space in command line.

write takes a parameter of a string you want to write to the file. ex1: line1 = $stdin.gets.chomp
ex2: target.write(line1 + "\n").
target.write(line1 + "\n" + line2 + "\n" + line3 + "\n")
# one line to cut the repetition in script ex16.rb line 45 to 50.

Find out why we had to pass a 'w' as an extra parameter to open.
Hint: open tries to be safe by making you explicitly say you want to write a file.
[By us asking to write a file, it in addition to making sure we are writing
to the file also physically creates the file in the same step]

* 'w' will create a new file if 6_a_test.txt is given as argument, if it doesn't exists.

If you open the file with 'w' mode, then do you really need the target.truncate()?
[I commented out the option for target truncate, and the script worked the same.
So no, it is not necessary to run the truncate command if we open the file with 'w' access.
The danger of course is that we will wipe out whatever is in there,
which might not be our goal. Here's where it pays to make sure :). ]

'w' write mode
'r' read mode
'a' for append

modifiers to the file modes can i use?
most important one to know for now is the (+ modifier)
'w+', 'r+' and 'a+' . This will open the file in both read and write mode,
and depending on the character use position the file in different ways.

open(filename) open's it in 'r' (read) mode by default, for the open() function.

then we are closing (variable named Target that has the file) other wise they get eligible for garbage collection.
close = File + Save
------------------------------------------------------

EX17: More Files

we will transfer content from from_file to to_file.

we can give .txt file name as argument to create a new .txt file while executing.

we are creating a variable in_file and calling (file object) with (open function) for from_file.
creating a variable indata and moving content of file (in_file) into indata with in_file.read (read) function.

#{indata.length} length tells us how many bytes long is the content in the file.

#{File.exists?(to_file)} tells us true / false based on file exists on the disk or not.

$stdin.gets waits for your input in command prompt. once you hit enter or Ctrl + C to quit.

we create a new variable out_file and calling (file object) with (open function) for to_file with 'w' write mode.
we are writing into to_file(out_file) with out_file.write(indata)  indata(from_file)

then we are closing out_file and in_file other wise they get eligible for garbage collection.
close = File + Save

# we could do these two on one line, how?
# indata = open(from_file).read
in_file = open(from_file)
indata = in_file.read

------------------------------------------------------

Ex18: Names, Variables, Code, Functions

To Call/Use/Run a Function all mean the same thing.
Function/ Variables name should not start with number but with letters, numbers and underscores will work.
EX18: Names, Variables, Code, Functions

Functions do 3 things:
1. They name pieces of code the way variables names strings and numbers.
2. They take arguments the way your scripts take ARGV (command line Argument).
3. Using 1 & 2 they (Functions) let you make your own "mini-scripts" or "tiny commands".

we create Functions by using the word def (define) in Ruby.

* It is not mandatory to pass values into ()parenthesis for argument in function.

def print_two(*args)  <-- This is like your scripts with ARGV(command line Argument)
First indented line is one that unpacks the arguments the same as with your scripts.
we named the function "print_two" or call peanut doesn't matter.
it is better to have functions with short names, that says what it does.
*args (asterisk args), is lot like your ARGV parameter. (command line argument)
but for functions asterisk tells ruby to take all arguments to the function and put them in args as a list.
it's like ARGV that you've been using, but for functions, it's not normally used too often unless specifically needed.

arg1, arg2 = args <-- unpacked arguments will be passed to variables arg1 & arg2.
and we print them with puts(variable) with #{arg1}.
print_two("anil","kumar")
#{} is how you insert Ruby computations into text strings.

print_two is not the easiest way to make a function.

In ruby we can skip the whole unpacking arguments and just use the names
we want right inside(). that's what print_two_again does.

# Easy way to define a function

def print_two_again(arg1, arg2)
  puts "arg1: #{arg1}, arg2: #{arg2}"
end

print_two_again("anil","kumar")

This is the way how you create your own functions in Ruby and use in your scripts.
like exists, open, read etc...

## CHECK LIST FOR FUNCTIONS ##


Did you start your function definition with def?
Does your function name have only characters and _ (underscore) characters?
Did you put an open parenthesis ( right after the function name?
Did you put your arguments after the parenthesis ( separated by commas?
Did you make each argument unique (meaning no duplicated names)?
Did you put a close parenthesis ) after the arguments?
Did you indent all lines of code you want in the function two spaces?
Did you end your function with end lined up with the def above?
When you run ("use" or "call") a function, check these things:

Did you call/use/run this function by typing its name?
Did you put the ( character after the name to run it?
Did you put the values you want into the parenthesis separated by commas?
Did you end the function call with a ) character?
Functions that don't have parameters do not need the () after them, but would it be clearer if you wrote them anyway?

"To 'run,' 'call,' or 'use' a function all mean the same thing."
------------------------------------------------------

EX19: Functions and Variables

we can pass straight numbers as values to function.
cheese_and_crackers(20, 30)

we can pass variables to function.
amount_of_cheese = 10
amount_of_crackers = 50
cheese_and_crackers(amount_of_cheese, amount_of_crackers)

we can give it(function) math.
cheese_and_crackers(10 + 20, 5 + 6)

we can even combine math and variables and pass it to function.
cheese_and_crackers(amount_of_cheese + 100, amount_of_crackers + 1000)

# In a way, the Argument to a function is like, = character when we make a variable.
# If you can use = to name something, you can usually pass it to a function as a argument.

If you want to ask user, use .to_i to convert what you get from gets.chomp

Does making the variable amount_of_cheese change the variable(argument) cheese_count in the function?
NO, those variable are separate and live outside the function. They are then passed to the
function and temporary versions are made just for the function's run. when the function exits
these temporary variables go away and everything keeps working.

It is bad to have GLOBAL Variables (like amount_of_cheese) with the same name as function variables(argument).
since then you're not quite sure which one you're talking about.

Is there a limit to the number of arguments a function can have?
It is fairly large, The Practical limit is about five arguments before the function becomes annoying to use.

Can you call a function within a function?
YES

------------------------------------------------------

EX20: Functions and Files

def print_all(f)
 puts f.read
end

# f is just an argument ex: ex18.rb or functional variable, you can use any letter or word if you want.
It has a "read head," and you can "seek" this read head around the file to positions, then work with it there. Each time you do f.seek(0) you're moving to the start of the file.
# Each time you do f.read, you're reading a line from the file (input_file (ex: ex20_test.txt)), and moving the read head to right side, after the \n that ends that line. \n means new line.
print_all function will print All lines in the file(input_file (ex: ex20_test.txt)).



def rewind(f)
  f.seek(0)
end

It has a "read head," and you can "seek" this read head around the file to positions, then work with it there. Each time you do f.seek(0) you're moving to the start of the file.

It seeks ("goes to", "attempts to find") a given position (as integer) in a stream.
In your code you define a new method called rewind which takes one argument.
When you call it with ---->  rewind(current_file)

you send the current_file (the one you have opened from disk or from anywhere else)
which is defined as:  ----->  current_file = File.open(input_file)

to the rewind method and it will "seek" to position 0 which is the beginning of the file.
You could for example make another method called almost_rewind and write:

def rewind(f)
  f.seek(5)
end
This would go 5 positions back in your stream.



def print_a_line(line_count, f)
  puts "#{line_count}, #{f.gets.chomp}"
end

=begin
gets.chomp: The part that immediately drew my attention here was the print_a_line function. I could see the line number was given as an argument and simply printed. The second argument was a file object variable. But the gets.chomp was being called on this file object. How was this giving us one line from the file object at a time? I couldn’t wait for the study drills to figure it out so I looked up the gets method on the I/O class object.
When you run the gets method on the I/O object (a file object is an I/O object), the method reads the next line. It identifies the lines by the new line separators. The file object, f, remembers where the “cursor” is after each read (something it references to remembers). So, every time you call read on the file object, it returns the next line.
The chomp method is called on the string returned, and it removes the new line character at the end. 
=end

# f just argument ex: ex18.rb or functional variable, it will carry the file object for(input_file (ex: ex20_test.txt)), , you can use any letter or word if you want.
# so f.gets takes or copies the 1st line from(input_file (ex: ex20_test.txt)) until it encounters a newline or end of the 1st line, then it stops.
# If you just use (.gets) it will add newline(\n) character automatically to the end of the string.
# (.chomp) avoid's creation of the newline, ignores (\n) character which was automatically created by ruby when gets is used.
# when you use (gets.chomp) to ask user input, user will answer and hit enter, in the same way f.gets will copie 1 new line from file(input_file (ex: ex20_test.txt)) each time it uses print_a_line function.


# current_line from bottom will pass value to line_count functional variable or argument. so the line_count prints 1, 2, 3,....
# current_file will pass value to functional variable or argument (f).


current_file = open(input_file)
(open) will collect the file object from input_file (what ever file you pass in the command line ex: ex20_test.txt) and passes it to current_file.

print_all(current_file)
file object for current_file will be passed to print_all function as a value to (f) functional variable or argument, where Each time you do f.read, you're reading a line from the file,
and moving the read head to right after the \n that ends that line. \n means new line. print_all function will print All lines in the file(input_file (ex: ex20_test.txt)).

rewind(current_file)
In a given file(input_file (ex: ex20_test.txt)) the rewind function/method will "seek" to position 0 which is the beginning of the file.

current_line = 1
current_line is just a variable and has no real connection to the file at all. We are manually incrementing it.

current_line = current_line + 1  or current_line += 1 both does the same thing manually incrementing 1. so the line_count prints 1, 2, 3,....
current_line is just a variable and has no real connection to the file at all. We are manually incrementing it.


------------------------------------------------------

EX21: Functions Can Return Something

we will see how to use = and a new Ruby word (return) to set variables to be a value from a --> function.

age = add(30, 5)   Basically 30, 5 will be passed to function, prints: ADDING 30 + 5, in the return step calculation will be done that is 35 and function ends.
from now every time (add function) is called, ex: age = add(30, 5) return will set variable with value 35 from (add function).
If you do puts "Age: #{age}"  Age: 35 will be printed.

Ruby adds the two numbers. Then when the function ends, any line that runs (add, subtract, multiply, divide functions) it will be able to assign this a + b result to a variable which has = .
ex: age, height, weight, iq

we have created a variable what = add(age, subtract(height, multiply(weight, divide(iq, 2))))

Start from the inside out.
Divide iq by 2. Multiply that by weight. Subtract that from height. Add that to age.
In general, with nested parentheses, you always start from the innermost.

The purpose of parentheses in this type of formula is to manage the order that the operations occur,
Note: order of operations is PEMDAS (ex: please excuse my dear aunt sally)
(standard order is multiplication and division, left to right, and then addition and subtraction, left to right).

Remove the word (return) and see if the script still works. You'll find that it does because Ruby implicitly returns whatever the last expression calculates.
However, this isn't clear so I want you to do it explicitly for my book.

# putting raw number's as per the study drill also display the same results, but they will not print the below 4 line, since in our formula at the bottom 2 lines, what = we did not use/call/run functions
DIVIDING 50 / 2
MULTIPLYING 180 * 25
SUBTRACTING 74 - 4500
ADDING 35 + -4426

what = 74 - 50 / 2 * 180 + 35

what = (height - iq / 2 * weight + age)
