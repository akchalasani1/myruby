git clone https://github.com/akchalasani1/myruby.git (download the repo to your local folder)

Your editor
$ git config  - -global core.editor atom. (Atom or what ever text editor you like sub lime)

---------------------------------------------------

git add -A  ( to add all files to staging)

git add . (if adding only 1 file with changes, if there are more files with changes git add -A for all, git add filename for specific one)

git commit -m (saving changes or staging changes to a file, for git push)

git commit -am “comment”  (doesn't work if new file ADDING, only works for existing files to modifying)
am = add and message

git add . && git commit -am "comment" (works for new files and modified)

git push (push the latest files to repo)

git pull (pulls the latest stuff)

git status (show what's new or modified files)

git log (to check the logs of commits done)

git diff (show the differences done to each file)

git branch (show if you are on master or branch)

git branch <name> (to create a new branch, give branch name with out < >)

git checkout <branch> ( to switch to newly created or existing branch, give branch name with out < > )

git checkout -b <branch> (to create a new branch and get into that branch)

git checkout master  ( to switch to master from branch )

git fetch && git checkout <branch> ( To Switch branch from master to branch)


git merge master ( merging the latest on the branch to master, from branch)

git merge --no-ff <branch>  ( fast forward only when master has same code as branch + new code on branch )
(If some stuff on master(in a file) is totally different from branch(in a file) no --no-ff required)


#### Only works if Git Features is installed ####
git log or git lg (to check the logs of commits done)

git log or git lg1 (to check the logs of commits done)

git log or git lg2 (to check the logs of commits done)

git log or git lg3 (to check the logs of commits done)


git branch -d test_branch (make sure you are not in the same branch)
Delete the specified branch. This is a “safe” operation in that Git prevents you from deleting the branch if it has un-merged changes.

git branch -D <branch>
Force delete the specified branch, even if it has unmerged changes. This is the command to use if you want to permanently throw away all of the commits associated with a particular line of development.

git branch -m <branch>
Rename the current branch to <branch>.

---------------------------------------------------

#### Git Features ####
Anils-MacBook-Air:myruby anil$ git config --global --edit

[alias]
    lg = !"git lg1"
    lg1 = !"git lg1-specific --all"
    lg2 = !"git lg2-specific --all"
    lg3 = !"git lg3-specific --all"

    lg1-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
    lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
    lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'

Additionally you an alias:
[alias]
    ac = commit -a -m
Then you can use it like this:
git ac "commit message"

---------------------------------------------------
https://github.com/robbyrussell/oh-my-zsh
Install oh-my-zsh through terminal

➜  ~ ls -la (after installing, go to new terminal tab and do ls -la)
➜  ~ nano .zshrc  (go to .zshrc file to change themes and plugins)
